#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Repository(object):
  """
  Attributes:
   - path
   - is_empty
   - is_bare
   - workdir
   - head
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'path', None, None, ), # 1
    (2, TType.BOOL, 'is_empty', None, None, ), # 2
    (3, TType.BOOL, 'is_bare', None, None, ), # 3
    (4, TType.STRING, 'workdir', None, None, ), # 4
    (5, TType.STRING, 'head', None, None, ), # 5
  )

  def __init__(self, path=None, is_empty=None, is_bare=None, workdir=None, head=None,):
    self.path = path
    self.is_empty = is_empty
    self.is_bare = is_bare
    self.workdir = workdir
    self.head = head

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_empty = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.is_bare = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.workdir = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.head = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Repository')
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 1)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.is_empty is not None:
      oprot.writeFieldBegin('is_empty', TType.BOOL, 2)
      oprot.writeBool(self.is_empty)
      oprot.writeFieldEnd()
    if self.is_bare is not None:
      oprot.writeFieldBegin('is_bare', TType.BOOL, 3)
      oprot.writeBool(self.is_bare)
      oprot.writeFieldEnd()
    if self.workdir is not None:
      oprot.writeFieldBegin('workdir', TType.STRING, 4)
      oprot.writeString(self.workdir)
      oprot.writeFieldEnd()
    if self.head is not None:
      oprot.writeFieldBegin('head', TType.STRING, 5)
      oprot.writeString(self.head)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.path is None:
      raise TProtocol.TProtocolException(message='Required field path is unset!')
    if self.is_empty is None:
      raise TProtocol.TProtocolException(message='Required field is_empty is unset!')
    if self.is_bare is None:
      raise TProtocol.TProtocolException(message='Required field is_bare is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Signature(object):
  """
  Attributes:
   - name
   - email
   - time
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'email', None, None, ), # 2
    (3, TType.I64, 'time', None, None, ), # 3
    (4, TType.I16, 'offset', None, None, ), # 4
  )

  def __init__(self, name=None, email=None, time=None, offset=None,):
    self.name = name
    self.email = email
    self.time = time
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.offset = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Signature')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 2)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 3)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I16, 4)
      oprot.writeI16(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.email is None:
      raise TProtocol.TProtocolException(message='Required field email is unset!')
    if self.time is None:
      raise TProtocol.TProtocolException(message='Required field time is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProcessResult(object):
  """
  Attributes:
   - stdout
   - stderr
   - fullcmd
   - returncode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'stdout', None, None, ), # 1
    (2, TType.STRING, 'stderr', None, None, ), # 2
    (3, TType.STRING, 'fullcmd', None, None, ), # 3
    (4, TType.I16, 'returncode', None, None, ), # 4
  )

  def __init__(self, stdout=None, stderr=None, fullcmd=None, returncode=None,):
    self.stdout = stdout
    self.stderr = stderr
    self.fullcmd = fullcmd
    self.returncode = returncode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.stdout = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stderr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fullcmd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.returncode = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProcessResult')
    if self.stdout is not None:
      oprot.writeFieldBegin('stdout', TType.STRING, 1)
      oprot.writeString(self.stdout)
      oprot.writeFieldEnd()
    if self.stderr is not None:
      oprot.writeFieldBegin('stderr', TType.STRING, 2)
      oprot.writeString(self.stderr)
      oprot.writeFieldEnd()
    if self.fullcmd is not None:
      oprot.writeFieldBegin('fullcmd', TType.STRING, 3)
      oprot.writeString(self.fullcmd)
      oprot.writeFieldEnd()
    if self.returncode is not None:
      oprot.writeFieldBegin('returncode', TType.I16, 4)
      oprot.writeI16(self.returncode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.stdout is None:
      raise TProtocol.TProtocolException(message='Required field stdout is unset!')
    if self.stderr is None:
      raise TProtocol.TProtocolException(message='Required field stderr is unset!')
    if self.fullcmd is None:
      raise TProtocol.TProtocolException(message='Required field fullcmd is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Blob(object):
  """
  Attributes:
   - type
   - sha
   - data
   - size
   - is_binary
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'sha', None, None, ), # 2
    (3, TType.STRING, 'data', None, None, ), # 3
    (4, TType.I64, 'size', None, None, ), # 4
    (5, TType.BOOL, 'is_binary', None, None, ), # 5
  )

  def __init__(self, type=None, sha=None, data=None, size=None, is_binary=None,):
    self.type = type
    self.sha = sha
    self.data = data
    self.size = size
    self.is_binary = is_binary

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.size = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.is_binary = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Blob')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.sha is not None:
      oprot.writeFieldBegin('sha', TType.STRING, 2)
      oprot.writeString(self.sha)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 3)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I64, 4)
      oprot.writeI64(self.size)
      oprot.writeFieldEnd()
    if self.is_binary is not None:
      oprot.writeFieldBegin('is_binary', TType.BOOL, 5)
      oprot.writeBool(self.is_binary)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.sha is None:
      raise TProtocol.TProtocolException(message='Required field sha is unset!')
    if self.data is None:
      raise TProtocol.TProtocolException(message='Required field data is unset!')
    if self.size is None:
      raise TProtocol.TProtocolException(message='Required field size is unset!')
    if self.is_binary is None:
      raise TProtocol.TProtocolException(message='Required field is_binary is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TreeEntry(object):
  """
  Attributes:
   - type
   - sha
   - mode
   - path
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'sha', None, None, ), # 2
    (3, TType.STRING, 'mode', None, None, ), # 3
    (4, TType.STRING, 'path', None, None, ), # 4
  )

  def __init__(self, type=None, sha=None, mode=None, path=None,):
    self.type = type
    self.sha = sha
    self.mode = mode
    self.path = path

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TreeEntry')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.sha is not None:
      oprot.writeFieldBegin('sha', TType.STRING, 2)
      oprot.writeString(self.sha)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.STRING, 3)
      oprot.writeString(self.mode)
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 4)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.sha is None:
      raise TProtocol.TProtocolException(message='Required field sha is unset!')
    if self.mode is None:
      raise TProtocol.TProtocolException(message='Required field mode is unset!')
    if self.path is None:
      raise TProtocol.TProtocolException(message='Required field path is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tree(object):
  """
  Attributes:
   - type
   - entries
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.LIST, 'entries', (TType.STRUCT,(TreeEntry, TreeEntry.thrift_spec)), None, ), # 2
  )

  def __init__(self, type=None, entries=None,):
    self.type = type
    self.entries = entries

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.entries = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TreeEntry()
            _elem5.read(iprot)
            self.entries.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tree')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.entries is not None:
      oprot.writeFieldBegin('entries', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.entries))
      for iter6 in self.entries:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.entries is None:
      raise TProtocol.TProtocolException(message='Required field entries is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Commit(object):
  """
  Attributes:
   - type
   - sha
   - parents
   - tree
   - committer
   - author
   - email
   - commit
   - message
   - body
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'sha', None, None, ), # 2
    (3, TType.LIST, 'parents', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'tree', None, None, ), # 4
    (5, TType.STRUCT, 'committer', (Signature, Signature.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'author', (Signature, Signature.thrift_spec), None, ), # 6
    (7, TType.STRING, 'email', None, None, ), # 7
    (8, TType.STRING, 'commit', None, None, ), # 8
    (9, TType.STRING, 'message', None, None, ), # 9
    (10, TType.STRING, 'body', None, None, ), # 10
  )

  def __init__(self, type=None, sha=None, parents=None, tree=None, committer=None, author=None, email=None, commit=None, message=None, body=None,):
    self.type = type
    self.sha = sha
    self.parents = parents
    self.tree = tree
    self.committer = committer
    self.author = author
    self.email = email
    self.commit = commit
    self.message = message
    self.body = body

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.parents = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.parents.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tree = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.committer = Signature()
          self.committer.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.author = Signature()
          self.author.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.commit = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.body = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Commit')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.sha is not None:
      oprot.writeFieldBegin('sha', TType.STRING, 2)
      oprot.writeString(self.sha)
      oprot.writeFieldEnd()
    if self.parents is not None:
      oprot.writeFieldBegin('parents', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.parents))
      for iter13 in self.parents:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tree is not None:
      oprot.writeFieldBegin('tree', TType.STRING, 4)
      oprot.writeString(self.tree)
      oprot.writeFieldEnd()
    if self.committer is not None:
      oprot.writeFieldBegin('committer', TType.STRUCT, 5)
      self.committer.write(oprot)
      oprot.writeFieldEnd()
    if self.author is not None:
      oprot.writeFieldBegin('author', TType.STRUCT, 6)
      self.author.write(oprot)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 7)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.commit is not None:
      oprot.writeFieldBegin('commit', TType.STRING, 8)
      oprot.writeString(self.commit)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 9)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.STRING, 10)
      oprot.writeString(self.body)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.sha is None:
      raise TProtocol.TProtocolException(message='Required field sha is unset!')
    if self.parents is None:
      raise TProtocol.TProtocolException(message='Required field parents is unset!')
    if self.tree is None:
      raise TProtocol.TProtocolException(message='Required field tree is unset!')
    if self.committer is None:
      raise TProtocol.TProtocolException(message='Required field committer is unset!')
    if self.author is None:
      raise TProtocol.TProtocolException(message='Required field author is unset!')
    if self.email is None:
      raise TProtocol.TProtocolException(message='Required field email is unset!')
    if self.commit is None:
      raise TProtocol.TProtocolException(message='Required field commit is unset!')
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    if self.body is None:
      raise TProtocol.TProtocolException(message='Required field body is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tag(object):
  """
  Attributes:
   - type
   - sha
   - name
   - target
   - tagger
   - message
   - body
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'sha', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'target', None, None, ), # 4
    (5, TType.STRUCT, 'tagger', (Signature, Signature.thrift_spec), None, ), # 5
    (6, TType.STRING, 'message', None, None, ), # 6
    (7, TType.STRING, 'body', None, None, ), # 7
  )

  def __init__(self, type=None, sha=None, name=None, target=None, tagger=None, message=None, body=None,):
    self.type = type
    self.sha = sha
    self.name = name
    self.target = target
    self.tagger = tagger
    self.message = message
    self.body = body

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.target = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.tagger = Signature()
          self.tagger.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.body = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tag')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.sha is not None:
      oprot.writeFieldBegin('sha', TType.STRING, 2)
      oprot.writeString(self.sha)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.target is not None:
      oprot.writeFieldBegin('target', TType.STRING, 4)
      oprot.writeString(self.target)
      oprot.writeFieldEnd()
    if self.tagger is not None:
      oprot.writeFieldBegin('tagger', TType.STRUCT, 5)
      self.tagger.write(oprot)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 6)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.STRING, 7)
      oprot.writeString(self.body)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.sha is None:
      raise TProtocol.TProtocolException(message='Required field sha is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.target is None:
      raise TProtocol.TProtocolException(message='Required field target is unset!')
    if self.tagger is None:
      raise TProtocol.TProtocolException(message='Required field tagger is unset!')
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    if self.body is None:
      raise TProtocol.TProtocolException(message='Required field body is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LightWeightTag(object):
  """
  Attributes:
   - type
   - name
   - tag
   - object
   - commit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'tag', None, None, ), # 3
    (4, TType.STRING, 'object', None, None, ), # 4
    (5, TType.STRUCT, 'commit', (Commit, Commit.thrift_spec), None, ), # 5
  )

  def __init__(self, type=None, name=None, tag=None, object=None, commit=None,):
    self.type = type
    self.name = name
    self.tag = tag
    self.object = object
    self.commit = commit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.tag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.object = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.commit = Commit()
          self.commit.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LightWeightTag')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.tag is not None:
      oprot.writeFieldBegin('tag', TType.STRING, 3)
      oprot.writeString(self.tag)
      oprot.writeFieldEnd()
    if self.object is not None:
      oprot.writeFieldBegin('object', TType.STRING, 4)
      oprot.writeString(self.object)
      oprot.writeFieldEnd()
    if self.commit is not None:
      oprot.writeFieldBegin('commit', TType.STRUCT, 5)
      self.commit.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.tag is None:
      raise TProtocol.TProtocolException(message='Required field tag is unset!')
    if self.object is None:
      raise TProtocol.TProtocolException(message='Required field object is unset!')
    if self.commit is None:
      raise TProtocol.TProtocolException(message='Required field commit is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GitObject(object):
  """
  Attributes:
   - type
   - blob
   - tree
   - commit
   - tag
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'blob', (Blob, Blob.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'tree', (Tree, Tree.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'commit', (Commit, Commit.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'tag', (Tag, Tag.thrift_spec), None, ), # 5
  )

  def __init__(self, type=None, blob=None, tree=None, commit=None, tag=None,):
    self.type = type
    self.blob = blob
    self.tree = tree
    self.commit = commit
    self.tag = tag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.blob = Blob()
          self.blob.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.tree = Tree()
          self.tree.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.commit = Commit()
          self.commit.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.tag = Tag()
          self.tag.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GitObject')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.blob is not None:
      oprot.writeFieldBegin('blob', TType.STRUCT, 2)
      self.blob.write(oprot)
      oprot.writeFieldEnd()
    if self.tree is not None:
      oprot.writeFieldBegin('tree', TType.STRUCT, 3)
      self.tree.write(oprot)
      oprot.writeFieldEnd()
    if self.commit is not None:
      oprot.writeFieldBegin('commit', TType.STRUCT, 4)
      self.commit.write(oprot)
      oprot.writeFieldEnd()
    if self.tag is not None:
      oprot.writeFieldBegin('tag', TType.STRUCT, 5)
      self.tag.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DiffLine(object):
  """
  Attributes:
   - attr
   - line
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'attr', None, None, ), # 1
    (2, TType.STRING, 'line', None, None, ), # 2
  )

  def __init__(self, attr=None, line=None,):
    self.attr = attr
    self.line = line

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.attr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.line = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DiffLine')
    if self.attr is not None:
      oprot.writeFieldBegin('attr', TType.STRING, 1)
      oprot.writeString(self.attr)
      oprot.writeFieldEnd()
    if self.line is not None:
      oprot.writeFieldBegin('line', TType.STRING, 2)
      oprot.writeString(self.line)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.attr is None:
      raise TProtocol.TProtocolException(message='Required field attr is unset!')
    if self.line is None:
      raise TProtocol.TProtocolException(message='Required field line is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Hunk(object):
  """
  Attributes:
   - old_start
   - new_start
   - old_lines
   - new_lines
   - lines
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'old_start', None, None, ), # 1
    (2, TType.I32, 'new_start', None, None, ), # 2
    (3, TType.I32, 'old_lines', None, None, ), # 3
    (4, TType.I32, 'new_lines', None, None, ), # 4
    (5, TType.LIST, 'lines', (TType.STRUCT,(DiffLine, DiffLine.thrift_spec)), None, ), # 5
  )

  def __init__(self, old_start=None, new_start=None, old_lines=None, new_lines=None, lines=None,):
    self.old_start = old_start
    self.new_start = new_start
    self.old_lines = old_lines
    self.new_lines = new_lines
    self.lines = lines

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.old_start = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.new_start = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.old_lines = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.new_lines = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.lines = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = DiffLine()
            _elem19.read(iprot)
            self.lines.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Hunk')
    if self.old_start is not None:
      oprot.writeFieldBegin('old_start', TType.I32, 1)
      oprot.writeI32(self.old_start)
      oprot.writeFieldEnd()
    if self.new_start is not None:
      oprot.writeFieldBegin('new_start', TType.I32, 2)
      oprot.writeI32(self.new_start)
      oprot.writeFieldEnd()
    if self.old_lines is not None:
      oprot.writeFieldBegin('old_lines', TType.I32, 3)
      oprot.writeI32(self.old_lines)
      oprot.writeFieldEnd()
    if self.new_lines is not None:
      oprot.writeFieldBegin('new_lines', TType.I32, 4)
      oprot.writeI32(self.new_lines)
      oprot.writeFieldEnd()
    if self.lines is not None:
      oprot.writeFieldBegin('lines', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.lines))
      for iter20 in self.lines:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.old_start is None:
      raise TProtocol.TProtocolException(message='Required field old_start is unset!')
    if self.new_start is None:
      raise TProtocol.TProtocolException(message='Required field new_start is unset!')
    if self.old_lines is None:
      raise TProtocol.TProtocolException(message='Required field old_lines is unset!')
    if self.new_lines is None:
      raise TProtocol.TProtocolException(message='Required field new_lines is unset!')
    if self.lines is None:
      raise TProtocol.TProtocolException(message='Required field lines is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Patch(object):
  """
  Attributes:
   - amode
   - bmode
   - old_sha
   - new_sha
   - additions
   - deletions
   - similarity
   - hunks
   - old_oid
   - new_oid
   - status
   - is_binary
   - old_file_path
   - new_file_path
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'amode', None, None, ), # 1
    (2, TType.STRING, 'bmode', None, None, ), # 2
    (3, TType.STRING, 'old_sha', None, None, ), # 3
    (4, TType.STRING, 'new_sha', None, None, ), # 4
    (5, TType.I32, 'additions', None, None, ), # 5
    (6, TType.I32, 'deletions', None, None, ), # 6
    (7, TType.I32, 'similarity', None, None, ), # 7
    (8, TType.LIST, 'hunks', (TType.STRUCT,(Hunk, Hunk.thrift_spec)), None, ), # 8
    (9, TType.STRING, 'old_oid', None, None, ), # 9
    (10, TType.STRING, 'new_oid', None, None, ), # 10
    (11, TType.STRING, 'status', None, None, ), # 11
    (12, TType.BOOL, 'is_binary', None, None, ), # 12
    (13, TType.STRING, 'old_file_path', None, None, ), # 13
    (14, TType.STRING, 'new_file_path', None, None, ), # 14
  )

  def __init__(self, amode=None, bmode=None, old_sha=None, new_sha=None, additions=None, deletions=None, similarity=None, hunks=None, old_oid=None, new_oid=None, status=None, is_binary=None, old_file_path=None, new_file_path=None,):
    self.amode = amode
    self.bmode = bmode
    self.old_sha = old_sha
    self.new_sha = new_sha
    self.additions = additions
    self.deletions = deletions
    self.similarity = similarity
    self.hunks = hunks
    self.old_oid = old_oid
    self.new_oid = new_oid
    self.status = status
    self.is_binary = is_binary
    self.old_file_path = old_file_path
    self.new_file_path = new_file_path

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.amode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bmode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.old_sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.new_sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.additions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.deletions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.similarity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.hunks = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Hunk()
            _elem26.read(iprot)
            self.hunks.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.old_oid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.new_oid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.is_binary = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.old_file_path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.new_file_path = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Patch')
    if self.amode is not None:
      oprot.writeFieldBegin('amode', TType.STRING, 1)
      oprot.writeString(self.amode)
      oprot.writeFieldEnd()
    if self.bmode is not None:
      oprot.writeFieldBegin('bmode', TType.STRING, 2)
      oprot.writeString(self.bmode)
      oprot.writeFieldEnd()
    if self.old_sha is not None:
      oprot.writeFieldBegin('old_sha', TType.STRING, 3)
      oprot.writeString(self.old_sha)
      oprot.writeFieldEnd()
    if self.new_sha is not None:
      oprot.writeFieldBegin('new_sha', TType.STRING, 4)
      oprot.writeString(self.new_sha)
      oprot.writeFieldEnd()
    if self.additions is not None:
      oprot.writeFieldBegin('additions', TType.I32, 5)
      oprot.writeI32(self.additions)
      oprot.writeFieldEnd()
    if self.deletions is not None:
      oprot.writeFieldBegin('deletions', TType.I32, 6)
      oprot.writeI32(self.deletions)
      oprot.writeFieldEnd()
    if self.similarity is not None:
      oprot.writeFieldBegin('similarity', TType.I32, 7)
      oprot.writeI32(self.similarity)
      oprot.writeFieldEnd()
    if self.hunks is not None:
      oprot.writeFieldBegin('hunks', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.hunks))
      for iter27 in self.hunks:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.old_oid is not None:
      oprot.writeFieldBegin('old_oid', TType.STRING, 9)
      oprot.writeString(self.old_oid)
      oprot.writeFieldEnd()
    if self.new_oid is not None:
      oprot.writeFieldBegin('new_oid', TType.STRING, 10)
      oprot.writeString(self.new_oid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 11)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.is_binary is not None:
      oprot.writeFieldBegin('is_binary', TType.BOOL, 12)
      oprot.writeBool(self.is_binary)
      oprot.writeFieldEnd()
    if self.old_file_path is not None:
      oprot.writeFieldBegin('old_file_path', TType.STRING, 13)
      oprot.writeString(self.old_file_path)
      oprot.writeFieldEnd()
    if self.new_file_path is not None:
      oprot.writeFieldBegin('new_file_path', TType.STRING, 14)
      oprot.writeString(self.new_file_path)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.amode is None:
      raise TProtocol.TProtocolException(message='Required field amode is unset!')
    if self.bmode is None:
      raise TProtocol.TProtocolException(message='Required field bmode is unset!')
    if self.new_sha is None:
      raise TProtocol.TProtocolException(message='Required field new_sha is unset!')
    if self.additions is None:
      raise TProtocol.TProtocolException(message='Required field additions is unset!')
    if self.deletions is None:
      raise TProtocol.TProtocolException(message='Required field deletions is unset!')
    if self.similarity is None:
      raise TProtocol.TProtocolException(message='Required field similarity is unset!')
    if self.hunks is None:
      raise TProtocol.TProtocolException(message='Required field hunks is unset!')
    if self.old_oid is None:
      raise TProtocol.TProtocolException(message='Required field old_oid is unset!')
    if self.new_oid is None:
      raise TProtocol.TProtocolException(message='Required field new_oid is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.is_binary is None:
      raise TProtocol.TProtocolException(message='Required field is_binary is unset!')
    if self.old_file_path is None:
      raise TProtocol.TProtocolException(message='Required field old_file_path is unset!')
    if self.new_file_path is None:
      raise TProtocol.TProtocolException(message='Required field new_file_path is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Diff(object):
  """
  Attributes:
   - old_sha
   - new_sha
   - patches
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'old_sha', None, None, ), # 1
    (2, TType.STRING, 'new_sha', None, None, ), # 2
    (3, TType.LIST, 'patches', (TType.STRUCT,(Patch, Patch.thrift_spec)), None, ), # 3
  )

  def __init__(self, old_sha=None, new_sha=None, patches=None,):
    self.old_sha = old_sha
    self.new_sha = new_sha
    self.patches = patches

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.old_sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.new_sha = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.patches = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = Patch()
            _elem33.read(iprot)
            self.patches.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Diff')
    if self.old_sha is not None:
      oprot.writeFieldBegin('old_sha', TType.STRING, 1)
      oprot.writeString(self.old_sha)
      oprot.writeFieldEnd()
    if self.new_sha is not None:
      oprot.writeFieldBegin('new_sha', TType.STRING, 2)
      oprot.writeString(self.new_sha)
      oprot.writeFieldEnd()
    if self.patches is not None:
      oprot.writeFieldBegin('patches', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.patches))
      for iter34 in self.patches:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.new_sha is None:
      raise TProtocol.TProtocolException(message='Required field new_sha is unset!')
    if self.patches is None:
      raise TProtocol.TProtocolException(message='Required field patches is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceUnavailable(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    self.validate()
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceUnavailable')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
