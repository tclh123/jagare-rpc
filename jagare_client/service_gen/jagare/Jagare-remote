#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Jagare
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  Repository get(string path)'
  print '   list_branches(string path)'
  print '   list_remotes(string path)'
  print '   list_tags(string path)'
  print '  GitObject show(string path, string ref)'
  print '  string ls_tree(string path, string ref, string req_path, bool recursive, bool with_size, bool with_commit, bool name_only)'
  print '   rev_list(string path, string to_ref, string from_ref, string file_path, i32 skip, i32 max_count, string author, string query, bool first_parent, i64 since, bool no_merges)'
  print '  Blame blame(string path, string ref, string req_path, i32 lineno)'
  print '  string format_patch(string path, string ref, string from_ref)'
  print '   detect_renamed(string path, string ref)'
  print '  bool commit(string path, string branch, string parent_ref, string author_name, string author_email, string message, string reflog,  data)'
  print '  Diff diff(string path, string ref, string from_ref, bool ignore_space, i16 flags, bool context_lines,  paths, bool rename_detection)'
  print '  string resolve_commit(string path, string version)'
  print '  string resolve_type(string path, string version)'
  print '  bool create_branch(string path, string name, string ref, bool force)'
  print '  bool delete_branch(string path, string name)'
  print '  Repository clone_to(string path, string to_path, bool is_bare, string branch, bool is_mirror,  env)'
  print '  Repository mirror(string url, string to_path, bool is_bare, string branch,  env)'
  print '  Repository init(string to_path, string work_path, bool is_bare)'
  print '   list_references(string path)'
  print '  bool add_remote(string path, string name, string url)'
  print '  bool update_ref(string path, string ref, string newvalue)'
  print '  bool update_head(string path, string branch_name)'
  print '  string sha(string path, string rev)'
  print '  string merge_base(string path, string to_sha, string from_sha)'
  print '  void fetch_all(string path)'
  print '  void fetch(string path, string name)'
  print '  void fetch_raw(string path, string name, bool is_q,  env)'
  print '  ProcessResult merge(string path, string ref, string msg, string commit_msg, bool no_ff,  env)'
  print '  MergeIndex merge_tree(string path, string ours, string theirs)'
  print '  MergeResult merge_head(string path, string ref)'
  print '  MergeIndex merge_commits(string path, string ours, string theirs)'
  print '  string merge_flow(string path, string merger_name, string merger_email, string message_header, string message_body, string tmpdir, string from_repo_path, string from_ref, string to_ref, string remote_name, bool no_ff)'
  print '  bool can_merge(string path, string tmpdir, string from_repo_path, string from_ref, string to_ref, string remote_name)'
  print '  ProcessResult push(string path, string remote, string ref,  env)'
  print '  string archive(string path, string prefix, string ref)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Jagare.Client(protocol)
transport.open()

if cmd == 'get':
  if len(args) != 1:
    print 'get requires 1 args'
    sys.exit(1)
  pp.pprint(client.get(args[0],))

elif cmd == 'list_branches':
  if len(args) != 1:
    print 'list_branches requires 1 args'
    sys.exit(1)
  pp.pprint(client.list_branches(args[0],))

elif cmd == 'list_remotes':
  if len(args) != 1:
    print 'list_remotes requires 1 args'
    sys.exit(1)
  pp.pprint(client.list_remotes(args[0],))

elif cmd == 'list_tags':
  if len(args) != 1:
    print 'list_tags requires 1 args'
    sys.exit(1)
  pp.pprint(client.list_tags(args[0],))

elif cmd == 'show':
  if len(args) != 2:
    print 'show requires 2 args'
    sys.exit(1)
  pp.pprint(client.show(args[0],args[1],))

elif cmd == 'ls_tree':
  if len(args) != 7:
    print 'ls_tree requires 7 args'
    sys.exit(1)
  pp.pprint(client.ls_tree(args[0],args[1],args[2],eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'rev_list':
  if len(args) != 11:
    print 'rev_list requires 11 args'
    sys.exit(1)
  pp.pprint(client.rev_list(args[0],args[1],args[2],args[3],eval(args[4]),eval(args[5]),args[6],args[7],eval(args[8]),eval(args[9]),eval(args[10]),))

elif cmd == 'blame':
  if len(args) != 4:
    print 'blame requires 4 args'
    sys.exit(1)
  pp.pprint(client.blame(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'format_patch':
  if len(args) != 3:
    print 'format_patch requires 3 args'
    sys.exit(1)
  pp.pprint(client.format_patch(args[0],args[1],args[2],))

elif cmd == 'detect_renamed':
  if len(args) != 2:
    print 'detect_renamed requires 2 args'
    sys.exit(1)
  pp.pprint(client.detect_renamed(args[0],args[1],))

elif cmd == 'commit':
  if len(args) != 8:
    print 'commit requires 8 args'
    sys.exit(1)
  pp.pprint(client.commit(args[0],args[1],args[2],args[3],args[4],args[5],args[6],eval(args[7]),))

elif cmd == 'diff':
  if len(args) != 8:
    print 'diff requires 8 args'
    sys.exit(1)
  pp.pprint(client.diff(args[0],args[1],args[2],eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'resolve_commit':
  if len(args) != 2:
    print 'resolve_commit requires 2 args'
    sys.exit(1)
  pp.pprint(client.resolve_commit(args[0],args[1],))

elif cmd == 'resolve_type':
  if len(args) != 2:
    print 'resolve_type requires 2 args'
    sys.exit(1)
  pp.pprint(client.resolve_type(args[0],args[1],))

elif cmd == 'create_branch':
  if len(args) != 4:
    print 'create_branch requires 4 args'
    sys.exit(1)
  pp.pprint(client.create_branch(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'delete_branch':
  if len(args) != 2:
    print 'delete_branch requires 2 args'
    sys.exit(1)
  pp.pprint(client.delete_branch(args[0],args[1],))

elif cmd == 'clone_to':
  if len(args) != 6:
    print 'clone_to requires 6 args'
    sys.exit(1)
  pp.pprint(client.clone_to(args[0],args[1],eval(args[2]),args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'mirror':
  if len(args) != 5:
    print 'mirror requires 5 args'
    sys.exit(1)
  pp.pprint(client.mirror(args[0],args[1],eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'init':
  if len(args) != 3:
    print 'init requires 3 args'
    sys.exit(1)
  pp.pprint(client.init(args[0],args[1],eval(args[2]),))

elif cmd == 'list_references':
  if len(args) != 1:
    print 'list_references requires 1 args'
    sys.exit(1)
  pp.pprint(client.list_references(args[0],))

elif cmd == 'add_remote':
  if len(args) != 3:
    print 'add_remote requires 3 args'
    sys.exit(1)
  pp.pprint(client.add_remote(args[0],args[1],args[2],))

elif cmd == 'update_ref':
  if len(args) != 3:
    print 'update_ref requires 3 args'
    sys.exit(1)
  pp.pprint(client.update_ref(args[0],args[1],args[2],))

elif cmd == 'update_head':
  if len(args) != 2:
    print 'update_head requires 2 args'
    sys.exit(1)
  pp.pprint(client.update_head(args[0],args[1],))

elif cmd == 'sha':
  if len(args) != 2:
    print 'sha requires 2 args'
    sys.exit(1)
  pp.pprint(client.sha(args[0],args[1],))

elif cmd == 'merge_base':
  if len(args) != 3:
    print 'merge_base requires 3 args'
    sys.exit(1)
  pp.pprint(client.merge_base(args[0],args[1],args[2],))

elif cmd == 'fetch_all':
  if len(args) != 1:
    print 'fetch_all requires 1 args'
    sys.exit(1)
  pp.pprint(client.fetch_all(args[0],))

elif cmd == 'fetch':
  if len(args) != 2:
    print 'fetch requires 2 args'
    sys.exit(1)
  pp.pprint(client.fetch(args[0],args[1],))

elif cmd == 'fetch_raw':
  if len(args) != 4:
    print 'fetch_raw requires 4 args'
    sys.exit(1)
  pp.pprint(client.fetch_raw(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'merge':
  if len(args) != 6:
    print 'merge requires 6 args'
    sys.exit(1)
  pp.pprint(client.merge(args[0],args[1],args[2],args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'merge_tree':
  if len(args) != 3:
    print 'merge_tree requires 3 args'
    sys.exit(1)
  pp.pprint(client.merge_tree(args[0],args[1],args[2],))

elif cmd == 'merge_head':
  if len(args) != 2:
    print 'merge_head requires 2 args'
    sys.exit(1)
  pp.pprint(client.merge_head(args[0],args[1],))

elif cmd == 'merge_commits':
  if len(args) != 3:
    print 'merge_commits requires 3 args'
    sys.exit(1)
  pp.pprint(client.merge_commits(args[0],args[1],args[2],))

elif cmd == 'merge_flow':
  if len(args) != 11:
    print 'merge_flow requires 11 args'
    sys.exit(1)
  pp.pprint(client.merge_flow(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],eval(args[10]),))

elif cmd == 'can_merge':
  if len(args) != 6:
    print 'can_merge requires 6 args'
    sys.exit(1)
  pp.pprint(client.can_merge(args[0],args[1],args[2],args[3],args[4],args[5],))

elif cmd == 'push':
  if len(args) != 4:
    print 'push requires 4 args'
    sys.exit(1)
  pp.pprint(client.push(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'archive':
  if len(args) != 3:
    print 'archive requires 3 args'
    sys.exit(1)
  pp.pprint(client.archive(args[0],args[1],args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
